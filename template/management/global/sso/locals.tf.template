{%- from "le-resources/utils.jinja" import users_list -%}
locals {
  #----------------------------------------------------------------------------
  # Define the users here
  #----------------------------------------------------------------------------
  users = {{ users_list(users) }}

  #----------------------------------------------------------------------------
  # Define the groups here
  #----------------------------------------------------------------------------
  groups = {
    administrators = {
      name        = "Administrators"
      description = "Provides full access to AWS services and resources."
    }
    devops = {
      name        = "DevOps"
      description = "Provides full access to many AWS services and resources except billing."
    }
    finops = {
      name        = "FinOps"
      description = "Provides access to billing and cost management."
    }
    securityauditor = {
      name        = "SecurityAuditor"
      description = "Provides access for security auditing."
    }
    readonly = {
      name        = "ReadOnly"
      description = "Provides view-only access to most resources."
    }
  }

  #----------------------------------------------------------------------------
  # Define user and group membership
  #----------------------------------------------------------------------------
  # Get only users and groups, discard the rest
  extract_users_groups_only = {
    for user, user_data in local.users : user => user_data.groups
  }

  # Get a list of maps that combine every user with every group they belong to
  users_groups_combined = [
    for user, groups in local.extract_users_groups_only : {
      for group in groups :
      "${user}_${group}" => {
        "user"  = user
        "group" = group
      }
    }
  ]

  # Now get all the submaps in the list merged into a single map that can be iterated more easily
  users_groups_membership = zipmap(
    flatten(
      [for item in local.users_groups_combined : keys(item)]
    ),
    flatten(
      [for item in local.users_groups_combined : values(item)]
    )
  )

  #----------------------------------------------------------------------------
  # IAM Identity Center
  #----------------------------------------------------------------------------
  # This identifies the SSO instance we'll be working with
  identity_store_id = tolist(data.aws_ssoadmin_instances.main.identity_store_ids)[0]

  # Principal types
  principal_type_group = "GROUP"
  principal_type_user  = "USER"

  # The duration needs to be specified in ISO 8601. The minimum session duration
  # is 1 hour, and can be set to a maximum of 12 hours.
  # Ref: https://docs.aws.amazon.com/singlesignon/latest/userguide/howtosessionduration.html
  #
  # You can find some examples below:
  #  - PT12H    Twelve hours
  #  - PT2H30M  Two hours and thirty minutes
  #  - PT90M    Ninety minutes
  #
  default_session_duration = "PT1H"

  default_relay_state = ""

  #----------------------------------------------------------------------------
  # Misc
  #----------------------------------------------------------------------------
  tags = {
    Terraform = "true"
  }
}
